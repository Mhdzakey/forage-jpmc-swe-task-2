From b3f7ea510821b609ff4eeade74579b3ac253257f Mon Sep 17 00:00:00 2001
From: MhdZakey <mhdzakaria360@gmail.com>
Date: Sat, 22 Apr 2023 11:08:03 -0700
Subject: [PATCH] fixed bugs and competed issues

it was an interesting task
---
 .vscode/settings.json |  3 +++
 datafeed/server3.py   |  2 +-
 src/App.tsx           | 27 +++++++++++++++++++++++----
 src/Graph.tsx         | 14 +++++++++++---
 4 files changed, 38 insertions(+), 8 deletions(-)
 create mode 100644 .vscode/settings.json

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..457f44d
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "python.analysis.typeCheckingMode": "basic"
+}
\ No newline at end of file
diff --git a/datafeed/server3.py b/datafeed/server3.py
index 68f4659..c2ec97f 100644
--- a/datafeed/server3.py
+++ b/datafeed/server3.py
@@ -151,7 +151,7 @@ def order_book(orders, book, stock_name):
 def generate_csv():
     """ Generate a CSV of order history. """
     with open('test.csv', 'wb') as f:
-        writer = csv.writer(f)
+        writer = csv.writer(f)  # type: ignore
         for t, stock, side, order, size in orders(market()):
             if t > MARKET_OPEN + SIM_LENGTH:
                 break
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7e6a28b 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,36 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+   getDataFromServer() {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
       this.setState({ data: [...this.state.data, ...serverResponds] });
     });
-  }
+    let x = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds: ServerRespond[]) => {
+          // Update the state by creating a new array of data that consists of
+          // Previous data in the state and the new data from server
+          this.setState({ 
+            data: serverResponds,
+            showGraph: true,
+          });
+        });
+        x++;
+        if ( x > 1000 ) {
+          clearInterval(interval);
+        }
+      }, 100);
+   }
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..256262c 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,8 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+   const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;  
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
@@ -49,6 +48,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+      {"stock": "distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price": "avg",
+      "timestamp":"distinct count"}`)
     }
   }
 
-- 
2.40.0.windows.1

